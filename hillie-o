#!/usr/bin/env python
"""Print notes okular annotation files.

Written by Matthias Baumgartner, 2018

Copyright (c) 2016, Matthias Baumgartner
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in
   the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

"""
# EXPORTS
__all__ = ('okular_highlights', 'main')

# IMPORTS
from basics import uniquepath, VERSION
from lxml import objectify
from shared import print_note
import os.path
import sys

## CODE ##

def okular_highlights(files, options):
    """Print notes from okular annotation files.

    All is printed to standard input or standard error.

    Options:
    * options.recursive     Handle directories
    * options.use_title     Print filename/document title instead of full path
    * options.valid_types   PDF annotation types to process
    * options.filter_keys   Only print stated keys.
    * options.remove_key    Don't print key tags
    * options.with_path     Print the file path with each line
    * options.with_page     Print the page number with each line
    * options.buffered      Buffer output
    * options.list_keys     Print key only

    """
    for path in files:
        if os.path.isdir(path):
            if options.recursive:
                okular_highlights([os.path.join(path, p) for p in os.listdir(path)], options)
            continue # Omit directories

        try:
            with open(uniquepath(path)) as ifile:
                root = objectify.fromstring(ifile.read())

            if options.use_title:
                m = re.search('^\d+\.(.*)\.xml$', path, re.I)
                if m is not None:
                    path = m.groups()[0]
                    path, ext = os.path.splitext(path)

            for page in root.pageList.page:
                if not hasattr(page, 'annotationList') or \
                   not hasattr(page.annotationList, 'annotation'):
                    continue # Page has no annotation

                for annot in page.annotationList.annotation:
                    if annot.get('type', '-1') in options.valid_types:
                        base = annot.find('base')
                        if base is None: continue # Annotation has no content

                        note = base.get('contents').strip()
                        if note is None: continue # Annotation has no content

                        page_no = page.get('number', -1)
                        print_note(path, note, page_no, options)

        except IOError, err:
            msg = '{}: {}: {}\n'.format(sys.argv[0], path, err.message) 
            sys.stderr.write(msg)
            if not options.buffered:
                sys.stderr.flush()

            continue # Abort on failure

        except AttributeError, err:
            continue # Document has no annotations


def main():
    """Print notes okular annotation files.

    usage: hillie [--help] [--version] [-h] [-H] [-n] [-s] [-t] [-k FILTER_KEYS]
                  [-r] [-a VALID_TYPES] [--line-buffered]
                  ...

    Print notes okular annotation files.

    positional arguments:
      paths

    optional arguments:
      --help                show this help message and exit
      --version             show program's version number and exit
      -h, --no-filename     Suppress the prefixing of file names on output. This
                            is the default when there is only one file.
      -H, --with-filename   Print the file name for each highlight. This is the
                            default when there is more than one file.
      -n, --page-number     Prefix each line of output with the 1-based page
                            number within its input file.
      -s, --remove-key      Do not print xml-style keys.
      -t, --use-title       Print document title instead of path.
      -k FILTER_KEYS, --key FILTER_KEYS
                            Show only listed keys. Use "None" for empty/no key
      -r, --recursive       Read all files under each directory, recursively.
      -a VALID_TYPES, --annotation-type VALID_TYPES
                            Extracted annotation types
      --list-keys           Print a list of all keys in the document. Does not
                            print notes.
      --line-buffered       Use line buffering on output. This can cause a
                            performance penalty.

    """
    import argparse

    usage = """Print notes okular annotation files."""
    parser = argparse.ArgumentParser(description=usage, add_help=False)

    parser.add_argument('--help', action='help', help='show this help message and exit')
    parser.add_argument('--version', action='version', version='%(prog)s {}'.format(VERSION))
    parser.add_argument('-h', '--no-filename', action='store_false', dest='with_path', default=None, help='Suppress the prefixing of file names on output. This is the default when there is only one file.')
    parser.add_argument('-H', '--with-filename', action='store_true', dest='with_path', default=None, help='Print the file name for each highlight. This is the default when there is more than one file.')
    parser.add_argument('-n', '--page-number', action='store_true', dest='with_page', default=False, help='Prefix each line of output with the 1-based page number within its input file.')
    parser.add_argument('-s', '--remove-key', action='store_true', dest='remove_key', default=False, help='Do not print xml-style keys.')
    parser.add_argument('-t', '--use-title', action='store_true', dest='use_title', default=False, help='Print document title instead of path.')
    parser.add_argument('-k', '--key', action='append', dest='filter_keys', default=[], help='Show only listed keys. Use "None" for empty/no key')
    parser.add_argument('-r', '--recursive', action='store_true', dest='recursive', default=False, help='Read all files under each directory, recursively.')
    parser.add_argument('-a', '--annotation-type', action='append', dest='valid_types', default=['4'], help='Extracted annotation types')
    parser.add_argument('--list-keys', action='store_true', dest='list_keys', default=False, help='Print a list of all keys in the document. Does not print notes.')
    parser.add_argument('--line-buffered', action='store_false', dest='buffered', default=True, help='Use line buffering on output. This can cause a performance penalty.')

    parser.add_argument('paths', nargs=argparse.REMAINDER)
    args = parser.parse_args()
    if args.with_path is None: # with_path default depends on number of files given
        args.with_path = len(args.paths) > 1

    # Allow comma-seperated keys/types and ensure lower case
    args.filter_keys = reduce(list.__add__, [map(str.lower, map(str.strip, arg.split(','))) for arg in args.filter_keys], [])
   
    # Run highlighter
    okular_highlights(args.paths, args)


## MAIN ##

if __name__ == "__main__":
    main()

## EOF ##
